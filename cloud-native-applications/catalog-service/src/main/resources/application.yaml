server:
  port: 9001
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5
spring:
  application:
    name: catalog-service
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
  datasource:
    url: jdbc:postgresql://localhost:55000/test
    username: test
    password: test
    hikari:
      connection-timeout: 2000
      maximum0pool-size: 5
  security:
    oauth2:
      resource-server:
        jwt:
          issuer-uri: http://localhost:8080/realms/PolarBookshop #A URI to the relevant authorization server, including Keycloak
management:
  endpoints:
    web:
      exposure:
        include: health, prometheus, flyway, info
  info:
    env:
      enabled: true
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState, redis #Readiness probe will combine the application's readiness state and the Redis' availability
  metrics:
    tags:
      application: ${spring.application.name}
logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

#polar:
#  greeting: Welcome to the local book catalog!